package com.javarush.task.task28.task2810;

import com.javarush.task.task28.task2810.model.Model;

public class Controller {

    private Model model;

    public Controller(Model model) throws IllegalArgumentException{
        if(model == null) throw new IllegalArgumentException();
        this.model = model;
//        System.out.println("Controller 12 ");

    }
    public void onCitySelect(String cityName){
//        System.out.println("Controller 16 ");
        model.selectCity(cityName);
    }
}


/*
Aggregator (14)
Теперь - как дебажить.
Поставь breakpoint, запусти в дебаг моде.
нажми Alt+F8 (Run -> Evaluate Expression).
В выражении (верхняя строка) напиши System.out.println("AAA") и нажми Alt+V (снизу кнопка Evaluate).
Перейди в окно консоли, там вывелось "AAA".

Используя это окно ты можешь смотреть текущие данные, заменять их на другие, нужные тебе.
Можешь выполнять все, что хочешь. Например, удалить все элементы мапы, изменить значение любой переменной, присвоить новое значение либо обнулить ее.
Поставь брекпоинт в Controller.onCitySelect, запусти в дебаг моде.
Остановились на этом брекпоинте?

Отлично, жми Alt+F8, сверху в строке cityName = "junior";
далее жми Alt+V и F9, чтобы продолжить работу приложения.
Список вакансий, который пришел в HtmlView.update, выполнялся для запроса "java junior".
Используй окно Expression Evaluation, думаю, оно тебе понадобится в следующем пункте.


Требования:
1. В классе HtmlView в методе updateFile открой поток для записи в файл.
2. Запиши в файл данные, которые метод updateFile получает аргументом.
3. Закрой поток записи в файл.



Aggregator (11)
В Model есть метод selectCity, в него передается название города, для которого выбираются вакансии.
Очевидно, что этот метод будет вызываться контроллером, т.к. он принимает решение, какую модель использовать.

1. Добавь в Controller новое поле Model model.

2. Удали метод scan() из Controller, его логика переместилась в модель.

3. Удали конструктор, toString и поле providers из контроллера.

4. Создай конструктор в Controller с аргументом Model.
На некорректные данные брось IllegalArgumentException

5. В Controller создай публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.

6. Удали код из метода main. Этот код уже не валидный.


Требования:
1. В классе Controller добавь новое поле Model model.
2. Удали из Controller метод scan, метод toString, конструктор и поле providers.
3. Добавь в Controller новый конструктор с аргументом Model. На некорректные данные брось IllegalArgumentException.
4. Создай в Controller публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.
5. Удали старый код из метода main.


Aggregator (5)
1. Добавь в интерфейс метод getVacancies(String searchString), который будет возвращать список вакансий.

2. Поправь ошибки в классе HHStrategy.

3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.

4. Давай попробуем запустить и посмотреть, как работает наша программа.
В методе main вместо вывода на экран напиши controller.scan();
Воспользуйся подсказкой IDEA и создай метод.
Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.

5. Исправь NPE, если появляется это исключение (поставь заглушку).

Требования:
1. В интерфейсе Strategy добавь метод getVacancies(String searchString).
2. Обнови класс HHStrategy, что бы в нем не было ошибок.
3. В классе Provider реализуй логику метода getJavaVacancies.
4. В методе main вместо вывода на экран добавь вызов controller.scan(). Реализуй этот метод согласно заданию.
5. Вызов main не должен кидать NullPointerException. Поставь заглушки в необходимых местах.



Aggregator (2)
1. Создай класс Controller, в нем будет содержаться бизнес логика.

2. В Controller добавь паблик конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки.
Сохрани их в приватное поле providers.
Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter 'providers'.

3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.

4. Создай метод toString в классе Controller (Alt+Insert -> toString()) со стандартной реализацией (должен выводить поле providers).

5. В методе main создай провайдер, а потом создай контроллер с этим провайдером.

6. В методе main выведи в консоль созданный экземпляр Controller-а.

Требования:
1. Создай класс Controller.
2. К классу Controller добавь конструктор, который принимает столько провайдеров, сколько в него передадут для обработки.
3. В конструкторе сохрани все провайдеры в поле providers. Если ни одного провайдера передано не было - брось IllegalArgumentException
4. В классе Controller создай метод toString со стандартной реализацией.
5. В методе main создай провайдер и контроллер с этим провайдером.
6. В методе main выведи в консоль созданный экземпляр контроллера.
 */