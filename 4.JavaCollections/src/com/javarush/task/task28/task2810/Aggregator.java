package com.javarush.task.task28.task2810;import com.javarush.task.task28.task2810.model.*;import com.javarush.task.task28.task2810.view.HtmlView;import java.io.IOException;public class Aggregator {    public static void main(String[] args) throws IOException {        HtmlView view = new HtmlView();        Model model = new Model(view, new Provider[]{                new Provider(new HHStrategy()),                new Provider(new MoikrugStrategy()),                new Provider(new JabsStrategy()),                new Provider(new RabotaStrategy()),                new Provider(new UAJoobleStrategy()),                new Provider(new UAIndeedStrategy()),//                new Provider(new WorkStrategy())        });        Controller controller = new Controller(model);        view.setController(controller);//        System.out.println("Aggregator 20");        view.userCitySelectEmulationMethod();    }}/*Aggregator (16)Ты молодец, большая работа позади! Теперь тебе легко будет мониторить вакансии для трудоустройства :)Сейчас Aggregator использует только одну стратегию сбора вакансий - с ХэдХантера.1. По аналогии с HHStrategy добавь стратегию для Мой круг.Назови класс MoikrugStrategy, реализуй метод getVacancies.Вот тебе пример ссылки:https://moikrug.ru/vacancies?q=java+DnepropetrovskПример ссылки на вакансию:https://moikrug.ru/vacancies/5601642562. В методе main создай провайдер для MoikrugStrategy. Передай этот провайдер в конструктор Model.Это удобно сделать, т.к. модель принимает много провайдеров.Остальную логику менять не нужно. Видишь, как легко расширять функционал?От правильной архитектуры зависит многое.ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!HTML код странички c вакансиями с Моего круга, как и ХэдХантера, может меняться. Чтобы эта задача прошла тестирование,при реализации задания воспользуйся закешированной версией страницы: http://javarush.ru/testdata/big28data2.html.Это необходимо для тестирования данного задания, после его сдачи проверь работу MoikrugStrategy на реальном сайте.Требования:1. В пакете model создай новый класс MoikrugStrategy, который реализует интерфейс Strategy.2. В классе MoikrugStrategy добавь приватную статическую константу URL_FORMAT, по аналогии с HHStrategy.3. В классе MoikrugStrategy создай protected метод getDocument(String searchString, int page). Реализуй его по аналогии с HHStrategy.4. Метод getVacancies класса MoikrugStrategy должен получать содержимое страниц с помощью метода getDocument. Начни с 0 страницы.5. Из объекта Document получи список html-элементов с вакансиями.Для каждого элемента создай объект вакансии и добавь его в возвращающий методом список.6. Нужно последовательно обработать все страницы результатов поиска. Как только страницы с вакансиями закончатся,прерви цикл и верни список найденных вакансий.7. У каждой вакансии должно быть заполнено поле title полученными из html-элемента данными о названии вакансии.8. У каждой вакансии должно быть заполнено поле url полученной из html-элемента ссылкой на вакансию.9. У каждой вакансии должно быть заполнено поле companyName полученными из html-элемента данными о компании.10. У каждой вакансии должно быть заполнено поле siteName значением сайта, на котором вакансия была найдена.11. Поле city у вакансии должно быть заполнено, если в html-элементе присутствовал тег с данными о городе.Иначе поле должно быть инициализировано пустой строкой.12. Поле salary у вакансии должно быть заполнено, если в html-элементе присутствовал тег с зарплатой.Иначе поле должно быть инициализировано пустой строкой.13. В методе main в модель добавь новый провайдер, инициализированный стратегией MoikrugStrategy.Aggregator (12)Чтобы запустить приложение, нужно эмулировать событие пользователя:1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod().Пусть этот метод пробросит вызов в контроллер для города "Odessa".2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.Это будет флаг, что можно двигаться дальше.3. Для запуска нужно еще обновить метод main в Aggregator.3.1. Создай вью, модель, контроллер.3.2. Засэть во вью контроллер.3.3. Вызови у вью метод userCitySelectEmulationMethod.4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.Работает? Отлично, что работает!Требования:1. В классе HtmlView создай и реализуй публичный метод void userCitySelectEmulationMethod() согласно заданию.2. В классе HtmlView в метод update добавь вывод количества вакансий в консоль.3. Реализуй метод main согласно заданию и проверь, работает ли приложение как положено.Aggregator (5)1. Добавь в интерфейс метод getVacancies(String searchString), который будет возвращать список вакансий.2. Поправь ошибки в классе HHStrategy.3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.4. Давай попробуем запустить и посмотреть, как работает наша программа.В методе main вместо вывода на экран напиши controller.scan();Воспользуйся подсказкой IDEA и создай метод.Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.5. Исправь NPE, если появляется это исключение (поставь заглушку).Требования:1. В интерфейсе Strategy добавь метод getVacancies(String searchString).2. Обнови класс HHStrategy, что бы в нем не было ошибок.3. В классе Provider реализуй логику метода getJavaVacancies.4. В методе main вместо вывода на экран добавь вызов controller.scan(). Реализуй этот метод согласно заданию.5. Вызов main не должен кидать NullPointerException. Поставь заглушки в необходимых местах.Aggregator (2)1. Создай класс Controller, в нем будет содержаться бизнес логика.2. В Controller добавь паблик конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки.Сохрани их в приватное поле providers.Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter 'providers'.3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.4. Создай метод toString в классе Controller (Alt+Insert -> toString()) со стандартной реализацией (должен выводить поле providers).5. В методе main создай провайдер, а потом создай контроллер с этим провайдером.6. В методе main выведи в консоль созданный экземпляр Controller-а.Требования:1. Создай класс Controller.2. К классу Controller добавь конструктор, который принимает столько провайдеров, сколько в него передадут для обработки.3. В конструкторе сохрани все провайдеры в поле providers. Если ни одного провайдера передано не было - брось IllegalArgumentException4. В классе Controller создай метод toString со стандартной реализацией.5. В методе main создай провайдер и контроллер с этим провайдером.6. В методе main выведи в консоль созданный экземпляр контроллера.Aggregator (1)Пришло время немного поработать с информацией в инете. В этом задании ты будешь писать агрегатор java вакансий.Что у нас должно быть?Должен быть список сайтов, на которых мы ищем вакансии.Для начала возьмем http://hh.ua/ и http://hh.ru/, потом уже добавим другие сайты поиска работы.Это один и тот же сайт, только в разных доменах.С чего же нужно начать реализацию? Конечно же с метода main : )1. Создай класс Aggregator с методом main.2. Создай пакет model, в нем создай класс Provider.Этот класс будет обобщать способ получения данных о вакансиях.3. Т.к. для каждого сайта будет выполняться одинаковый сценарий, то будет паттерн Стратегия. Почитай про него в инете на вики.В пакете model создай интерфейс Strategy.Он будет отвечать за получение данных с сайта.4. В класс Provider добавь поле Strategy strategy. Добавь конструктор с этим полем и сеттер.Требования:1. Создай класс Aggregator с методом main.2. Создай пакет model, и в нем создай класс Provider.3. В пакете model создай интерфейс Strategy.4. В класс Provider добавь поле Strategy strategy. Добавь конструктор с этим полем и сеттер. */